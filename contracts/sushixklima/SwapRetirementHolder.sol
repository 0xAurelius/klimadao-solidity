// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

import "./keepers/KeeperCompatible.sol";
import "../helpers/Ownable.sol";

interface IKlimaRetirementAggregator {

    function retireCarbon(
        address _sourceToken,
        address _poolToken,
        uint256 _amount,
        bool _amountInCarbon,
        address _beneficiaryAddress,
        string memory _beneficiaryString,
        string memory _retirementMessage
    ) external;
}


contract SwapRetirementHolder is KeeperCompatibleInterface, Ownable {

    /**
     * Use an interval in seconds and a timestamp to slow execution of Upkeep
     */
    uint public immutable interval;
    uint public lastTimeStamp;
    IKlimaRetirementAggregator public KlimaAggregator;

    constructor(address _KlimaAggregator) public {
        KlimaAggregator = _KlimaAggregator;
    }

    function setKlimaAggregator(address newAggregator) public onlyOwner {
        KlimaAggregator = newAggregator;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            counter = counter + 1;
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }



}
